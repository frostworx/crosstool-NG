include:
  - template: 'Workflows/Branch-Pipelines.gitlab-ci.yml'

stages:
  - build
  - internal_deploy
  - pre_test
  - test
  - dejagnu-test
  - github_deploy

image: ${CI_DOCKER_REGISTRY}/esp32-ci-env

variables:
  # GIT_STRATEGY - use option from "CI / CD Settings" - "General pipelines"
  GIT_SUBMODULE_STRATEGY: normal

  # show artifact downloading progress
  TRANSFER_METER_FREQUENCY: 5s

  # let's do not compress artifacts because we already use compressed archives
  ARTIFACT_COMPRESSION_LEVEL: "fastest"

  ESP_COMPILER_TESTS_BRANCH: "esp-2022r1-2-branch"

  GCC_VER: "11.2.0"

  ARCHIVE_TOOL: "tar -cJvf" # 'v' we need to check the contents of the archive by log
  UNARCHIVE_TOOL: "tar -xf"
  ARCHIVE_EXT: "tar.xz"

  DEJAGNU_IMAGE_TAG: 20210826-3

.use_ci_tools: &use_ci_tools |
  curl -sSL ${CIT_LOADER_URL} -o cit_loader.sh && sh cit_loader.sh
  source citools/import_functions

.add_gitlab_key: &add_gitlab_key |
  cit_add_ssh_key "${GITLAB_KEY}"

# ESPCI_HOMEBREW_PREFIX is set up in runner's config.toml
.check_and_setup_homebrew: &check_and_setup_homebrew |
  if [[ "$OSTYPE" == "darwin"* ]]; then
    eval "$(${ESPCI_HOMEBREW_PREFIX}/bin/brew shellenv)"
  fi

before_script:
  - *use_ci_tools
  - *add_gitlab_key
  - *check_and_setup_homebrew

# Prepare release name/number
.get_release_name: &get_release_name |
  # using annotated tags
  REL_NUM=$(git describe --abbrev=7)
  REL_SFX="gcc${GCC_VER//./_}"
  REL_NAME=${CONF_TARGET}-${REL_SFX}-${REL_NUM}-${PLATFORM_NAME}
  ARCHIVE_NAME=${REL_NAME}.${ARCHIVE_EXT}
  echo "PLATFORM_NAME: $PLATFORM_NAME"
  echo "REL_NUM: $REL_NUM"
  echo "REL_NAME: $REL_NAME"
  echo "ARCHIVE_NAME: $ARCHIVE_NAME"

# Configure crosstool-NG
.build_ctng: &build_ctng |
  ./bootstrap
  ./configure --enable-local
  make
  ./ct-ng ${CONF_TARGET}

# HOMEBREW_PREFIX is an original variable from "brew shellenv"
.build_ctng_macos_native: &build_ctng_macos_native |
  (
    PATH="${HOMEBREW_PREFIX}/opt/gnu-sed/libexec/gnubin:${PATH:-}";
    PATH="${HOMEBREW_PREFIX}/opt/openssl@3/bin:${PATH:-}";
    PATH="${HOMEBREW_PREFIX}/opt/binutils/bin:${PATH:-}";
    PATH="${HOMEBREW_PREFIX}/opt/libtool/libexec/gnubin:${PATH:-}";
    PATH="${HOMEBREW_PREFIX}/opt/ncurses/bin:${PATH:-}";
    export PATH;
    export LDFLAGS="-L${HOMEBREW_PREFIX}/opt/ncurses/lib ${LDFLAGS:-}";
    export LDFLAGS="-L${HOMEBREW_PREFIX}/opt/gettext/lib ${LDFLAGS:-}";
    export CPPFLAGS="-I${HOMEBREW_PREFIX}/opt/ncurses/include ${CPPFLAGS:-}";
    export CPPFLAGS="-I${HOMEBREW_PREFIX}/opt/gettext/include ${CPPFLAGS:-}";

    ./bootstrap;
    ./configure --enable-local;
    make;
    ./ct-ng ${CONF_TARGET};
  )

# ct-ng options common for all platforms
.configure_common: &configure_common |
  echo "# CT_LOG_PROGRESS_BAR is not set" >> .config
  echo "# CT_PREFIX_DIR_RO is not set" >> .config
  echo "CT_LOG_EXTRA=y" >> .config
  echo "CT_LOG_LEVEL_MAX=\"EXTRA\"" >> .config
  echo "CT_USE_MIRROR=y" >> .config
  echo "CT_FORCE_MIRROR=y" >> .config
  echo "CT_MIRROR_BASE_URL=\"${MIRROR_BASE}\"" >> .config
  echo "CT_NEWLIB_DEVEL_URL=\"${GITLAB_SSH_SERVER}/idf/newlib-cygwin.git\"" >> .config
  echo "CT_GCC_DEVEL_URL=\"${GITLAB_SSH_SERVER}/idf/gcc.git\"" >> .config
  echo "CT_BINUTILS_DEVEL_URL=\"${GITLAB_SSH_SERVER}/idf/binutils-gdb.git\"" >> .config
  echo "CT_GDB_DEVEL_URL=\"${GITLAB_SSH_SERVER}/idf/binutils-gdb.git\"" >> .config

# Configuration specific to Docker
.configure_docker: &configure_docker |
  echo "CT_ALLOW_BUILD_AS_ROOT=y" >> .config
  echo "CT_ALLOW_BUILD_AS_ROOT_SURE=y" >> .config
  echo "CT_CONNECT_TIMEOUT=30" >> .config

# If PIE is enabled by default in build GCC, add a flag to disable it
# For example, it appears on Ubuntu 17.04 or Debian 9
.configure_linux_no_pie: &configure_linux_no_pie |
  gcc -v |& grep -- --enable-default-pie > /dev/null && echo "CT_EXTRA_LDFLAGS_FOR_HOST=\"-no-pie\"" >> .config

# Configuration specific to crossbuilds
.configure_crossbuild: &configure_crossbuild |
  echo "CT_CANADIAN=y" >> .config
  echo "CT_BUILD=\"${CONF_BUILD}\"" >> .config
  echo "CT_BUILD_PREFIX=\"${CONF_BUILD}-\"" >> .config
  echo "CT_BUILD_SUFFIX=\"\"" >> .config
  echo "CT_HOST=\"${CONF_HOST}\"" >> .config
  echo "CT_HOST_PREFIX=\"${CONF_HOST}-\"" >> .config
  echo "CT_HOST_SUFFIX=\"\"" >> .config

  # No support Python in GDB in cross-compilation now,
  # see https://stackoverflow.com/questions/33512541/cross-compiling-gdb-for-arm-with-python-failed#34625177
  # Espressif provides GDB 11+ with Python 3 support separately
  echo "# CT_GDB_CROSS_PYTHON is not set" >> .config

.configure_macos_native: &configure_macos_native |
  # No old Python 2 on macOS anymore
  # Espressif provides GDB 11+ with Python 3 support separately
  echo "# CT_GDB_CROSS_PYTHON is not set" >> .config

.configure_win_crossbuild: &configure_win_crossbuild |
  # Append option
  ( \
    KV=$(grep "CT_CC_GCC_EXTRA_CONFIG_ARRAY" .config) \
    && echo "${KV%\"} --with-gnu-ld\"" >> .config; \
  )

# Actual build
.build_toolchain: &build_toolchain |
  ./ct-ng oldconfig
  ./ct-ng build

.add_extra_files: &add_extra_files |
  if [ "${EXTRA_BINS:-}" ]; then
    cp -v ${EXTRA_BINS} builds/${CONF_TARGET}/bin/
  fi

# Package the toolchain
.package_toolchain: &package_toolchain |
  mkdir -p dist
  pushd builds
  rm -f ../build.log
  mv ${CONF_TARGET}/build.log.bz2 ..
  ${ARCHIVE_TOOL} ${ARCHIVE_NAME} ${CONF_TARGET}/ > tar-list.txt 2>&1
  mv tar-list.txt ..
  mv ${ARCHIVE_NAME} ../dist/
  echo "${ARCHIVE_NAME}" > ../dist/file_${PLATFORM_NAME}_${CONF_TARGET}
  ls -l ../dist/
  popd

# Common template for all builds
.build_template:
  stage: build
  tags: [ "build", "amd64" ]
  artifacts:
    paths:
      - .config
      # suggest you use `bzless` tool to easily read this log
      - build.log.bz2
      - tar-list.txt
      - dist
    when: always
    expire_in: 6 weeks
  after_script:
    # save artifacts in any case (both failure or success)
    - git add -f dist tar-list.txt build.log.bz2 .config
    - git clean -d -x -f -f

.build_template_linux:
  extends: .build_template
  script:
    - *get_release_name
    - *build_ctng
    - *configure_common
    - *configure_docker
    - *configure_linux_no_pie
    - *build_toolchain
    - *package_toolchain

esp32_lin_amd64:
  extends: .build_template_linux
  image: $CI_DOCKER_REGISTRY/esp32-toolchain
  variables:
    PLATFORM_NAME: "linux-amd64"
    CONF_TARGET: "xtensa-esp32-elf"

esp32s2_lin_amd64:
  extends: .build_template_linux
  image: $CI_DOCKER_REGISTRY/esp32-toolchain
  variables:
    PLATFORM_NAME: "linux-amd64"
    CONF_TARGET: "xtensa-esp32s2-elf"

esp32s3_lin_amd64:
  extends: .build_template_linux
  image: $CI_DOCKER_REGISTRY/esp32-toolchain
  variables:
    PLATFORM_NAME: "linux-amd64"
    CONF_TARGET: "xtensa-esp32s3-elf"

riscv32_esp_lin_amd64:
  extends: .build_template_linux
  image: $CI_DOCKER_REGISTRY/esp32-toolchain
  variables:
    PLATFORM_NAME: "linux-amd64"
    CONF_TARGET: "riscv32-esp-elf"

esp32_lin_i686:
  extends: .build_template_linux
  image: $CI_DOCKER_REGISTRY/esp32-toolchain-x86
  variables:
    PLATFORM_NAME: "linux-i686"
    CONF_TARGET: "xtensa-esp32-elf"

esp32s2_lin_i686:
  extends: .build_template_linux
  image: $CI_DOCKER_REGISTRY/esp32-toolchain-x86
  variables:
    PLATFORM_NAME: "linux-i686"
    CONF_TARGET: "xtensa-esp32s2-elf"

esp32s3_lin_i686:
  extends: .build_template_linux
  image: $CI_DOCKER_REGISTRY/esp32-toolchain-x86
  variables:
    PLATFORM_NAME: "linux-i686"
    CONF_TARGET: "xtensa-esp32s3-elf"

riscv32_esp_lin_i686:
  extends: .build_template_linux
  image: $CI_DOCKER_REGISTRY/esp32-toolchain-x86
  variables:
    PLATFORM_NAME: "linux-i686"
    CONF_TARGET: "riscv32-esp-elf"

.template_macos_cross:
  extends: .build_template
  image: $CI_DOCKER_REGISTRY/esp32-toolchain-macos-cross
  variables:
    PLATFORM_NAME: "macos"
    CONF_BUILD: "x86_64-linux-gnu"
    CONF_HOST: "x86_64-apple-darwin12"
    MACOSX_DEPLOYMENT_TARGET: "10.8"
  script:
    - *get_release_name
    - *build_ctng
    - *configure_common
    - *configure_docker
    - *configure_crossbuild
    - *build_toolchain
    - *package_toolchain

esp32_macos:
  extends: .template_macos_cross
  variables:
    CONF_TARGET: "xtensa-esp32-elf"

esp32s2_macos:
  extends: .template_macos_cross
  variables:
    CONF_TARGET: "xtensa-esp32s2-elf"

esp32s3_macos:
  extends: .template_macos_cross
  variables:
    CONF_TARGET: "xtensa-esp32s3-elf"

riscv32_esp_macos:
  extends: .template_macos_cross
  variables:
    CONF_TARGET: "riscv32-esp-elf"

.template_macos_arm64_native:
  extends: .build_template
  tags: [ "darwin", "aarch64" ]
  variables:
    PLATFORM_NAME: "macos-arm64"
    CONF_TARGET: "xtensa-esp32-elf"
  script:
    - *get_release_name
    - *build_ctng_macos_native
    - *configure_common
    - *configure_macos_native
    - *configure_docker
    - *build_toolchain
    - *package_toolchain

esp32_macos_arm64:
  extends: .template_macos_arm64_native
  variables:
    CONF_TARGET: "xtensa-esp32-elf"

esp32s2_macos_arm64:
  extends: .template_macos_arm64_native
  variables:
    CONF_TARGET: "xtensa-esp32s2-elf"

esp32s3_macos_arm64:
  extends: .template_macos_arm64_native
  variables:
    CONF_TARGET: "xtensa-esp32s3-elf"

riscv32_esp_macos_arm64:
  extends: .template_macos_arm64_native
  variables:
    CONF_TARGET: "riscv32-esp-elf"

.template_win_cross:
  extends: .build_template
  image: $CI_DOCKER_REGISTRY/esp32-toolchain-win-cross
  variables:
    PLATFORM_NAME: "win32"
    CONF_BUILD: "x86_64-linux-gnu"
    CONF_HOST: "i686-w64-mingw32"
    ARCHIVE_TOOL: "zip -9 -r"
    ARCHIVE_EXT: "zip"
    EXTRA_BINS: "/usr/lib/gcc/i686-w64-mingw32/6.3-win32/libgcc_s_sjlj-1.dll /usr/lib/gcc/i686-w64-mingw32/6.3-win32/libstdc++-6.dll"
  script:
    - *get_release_name
    - *build_ctng
    - *configure_common
    - *configure_docker
    - *configure_crossbuild
    - *configure_win_crossbuild
    - *build_toolchain
    - *add_extra_files
    - *package_toolchain

esp32_win:
  extends: .template_win_cross
  variables:
    CONF_TARGET: "xtensa-esp32-elf"

esp32s2_win:
  extends: .template_win_cross
  variables:
    CONF_TARGET: "xtensa-esp32s2-elf"

esp32s3_win:
  extends: .template_win_cross
  variables:
    CONF_TARGET: "xtensa-esp32s3-elf"

riscv32_esp_win:
  extends: .template_win_cross
  variables:
    CONF_TARGET: "riscv32-esp-elf"

.template_win64_cross:
  extends: .build_template
  image: $CI_DOCKER_REGISTRY/esp32-toolchain-win64-cross
  variables:
    PLATFORM_NAME: "win64"
    CONF_BUILD: "x86_64-linux-gnu"
    CONF_HOST: "x86_64-w64-mingw32"
    ARCHIVE_TOOL: "zip -9 -r"
    ARCHIVE_EXT: "zip"
    EXTRA_BINS: "/usr/lib/gcc/x86_64-w64-mingw32/6.3-win32/libgcc_s_seh-1.dll /usr/lib/gcc/x86_64-w64-mingw32/6.3-win32/libstdc++-6.dll"
  script:
    - *get_release_name
    - *build_ctng
    - *configure_common
    - *configure_docker
    - *configure_crossbuild
    - *configure_win_crossbuild
    - *build_toolchain
    - *add_extra_files
    - *package_toolchain

esp32_win64:
  extends: .template_win64_cross
  variables:
    CONF_TARGET: "xtensa-esp32-elf"

esp32s2_win64:
  extends: .template_win64_cross
  variables:
    CONF_TARGET: "xtensa-esp32s2-elf"

esp32s3_win64:
  extends: .template_win64_cross
  variables:
    CONF_TARGET: "xtensa-esp32s3-elf"

riscv32_esp_win64:
  extends: .template_win64_cross
  variables:
    CONF_TARGET: "riscv32-esp-elf"

.template_lin_arm_cross:
  extends: .build_template
  image: $CI_DOCKER_REGISTRY/esp32-toolchain-arm-cross
  variables:
    CONF_BUILD: "x86_64-linux-gnu"
  script:
    - *get_release_name
    - *build_ctng
    - *configure_common
    - *configure_docker
    - *configure_linux_no_pie
    - *configure_crossbuild
    - *build_toolchain
    - *package_toolchain

esp32_lin_armel:
  extends: .template_lin_arm_cross
  variables:
    PLATFORM_NAME: "linux-armel"
    CONF_TARGET: "xtensa-esp32-elf"
    CONF_HOST: "arm-linux-gnueabi"

esp32s2_lin_armel:
  extends: .template_lin_arm_cross
  variables:
    PLATFORM_NAME: "linux-armel"
    CONF_TARGET: "xtensa-esp32s2-elf"
    CONF_HOST: "arm-linux-gnueabi"

esp32s3_lin_armel:
  extends: .template_lin_arm_cross
  variables:
    PLATFORM_NAME: "linux-armel"
    CONF_TARGET: "xtensa-esp32s3-elf"
    CONF_HOST: "arm-linux-gnueabi"

riscv32_esp_lin_armel:
  extends: .template_lin_arm_cross
  variables:
    PLATFORM_NAME: "linux-armel"
    CONF_TARGET: "riscv32-esp-elf"
    CONF_HOST: "arm-linux-gnueabi"

# ARMHF

esp32_lin_armhf:
  extends: .template_lin_arm_cross
  variables:
    PLATFORM_NAME: "linux-armhf"
    CONF_TARGET: "xtensa-esp32-elf"
    CONF_HOST: "arm-linux-gnueabihf"

esp32s2_lin_armhf:
  extends: .template_lin_arm_cross
  variables:
    PLATFORM_NAME: "linux-armhf"
    CONF_TARGET: "xtensa-esp32s2-elf"
    CONF_HOST: "arm-linux-gnueabihf"

esp32s3_lin_armhf:
  extends: .template_lin_arm_cross
  variables:
    PLATFORM_NAME: "linux-armhf"
    CONF_TARGET: "xtensa-esp32s3-elf"
    CONF_HOST: "arm-linux-gnueabihf"

riscv32_esp_lin_armhf:
  extends: .template_lin_arm_cross
  variables:
    PLATFORM_NAME: "linux-armhf"
    CONF_TARGET: "riscv32-esp-elf"
    CONF_HOST: "arm-linux-gnueabihf"

# ARM64

esp32_lin_arm64:
  extends: .template_lin_arm_cross
  variables:
    PLATFORM_NAME: "linux-arm64"
    CONF_TARGET: "xtensa-esp32-elf"
    CONF_HOST: "aarch64-linux-gnu"

esp32s2_lin_arm64:
  extends: .template_lin_arm_cross
  variables:
    PLATFORM_NAME: "linux-arm64"
    CONF_TARGET: "xtensa-esp32s2-elf"
    CONF_HOST: "aarch64-linux-gnu"

esp32s3_lin_arm64:
  extends: .template_lin_arm_cross
  variables:
    PLATFORM_NAME: "linux-arm64"
    CONF_TARGET: "xtensa-esp32s3-elf"
    CONF_HOST: "aarch64-linux-gnu"

riscv32_esp_lin_arm64:
  extends: .template_lin_arm_cross
  variables:
    PLATFORM_NAME: "linux-arm64"
    CONF_TARGET: "riscv32-esp-elf"
    CONF_HOST: "aarch64-linux-gnu"

upload_to_internal:
  stage: internal_deploy
  image: $CI_DOCKER_REGISTRY/compiler-testsuite:2
  when: manual
  allow_failure: true
  tags: [ "build", "amd64", "shiny" ]
  variables:
    # don't use "GIT_STRATEGY: none", because we need cleaning old artifacts in 'dist/' that came from previous pipelines
    GIT_SUBMODULE_STRATEGY: none
    CTNG_ESP_HELPERS_BRANCH: "-b master"
    TARGETS: "xtensa-esp32-elf xtensa-esp32s2-elf xtensa-esp32s3-elf riscv32-esp-elf"
    HOSTS: "linux-amd64 linux-arm64 linux-armel linux-armhf linux-i686 macos macos-arm64 win32 win64"
  artifacts:
    paths:
      # a list just for check files, debug
      - dist/src-tar-list.txt
    reports:
      dotenv: dist/dist.env
  before_script:
    - *use_ci_tools
  script:
    - cd dist
    - DIST_VERSION=$(git describe --abbrev=7)
    - echo "DIST_VERSION=$DIST_VERSION" >> dist.env
    - RELEASE_CHECKSUM_FILE="${CI_PROJECT_NAME}-${DIST_VERSION}-checksum.sha256"
    - RELEASE_SRC_NAME="${CI_PROJECT_NAME}-${DIST_VERSION}-src"
    - RELEASE_SRC_FILE="${CI_PROJECT_NAME}-${DIST_VERSION}-src.${ARCHIVE_EXT}"
    # Create a source archive
    - rm -rf -- "${RELEASE_SRC_NAME}" "${RELEASE_SRC_FILE}"
    - git clone --quiet --depth 1 --recurse-submodules --shallow-submodules ${CI_REPOSITORY_URL} "${RELEASE_SRC_NAME}"
    - find "${RELEASE_SRC_NAME}" -name ".git" -type d -exec rm -rf -- "{}" +
    - find "${RELEASE_SRC_NAME}" -name .git\* -exec rm -rf -- {} +
    - ${ARCHIVE_TOOL} "${RELEASE_SRC_FILE}" "${RELEASE_SRC_NAME}" > src-tar-list.txt 2>&1
    - rm -rf -- "${RELEASE_SRC_NAME}"
    - ls -l
    # Create a checksum file
    - DIST_FILE_LIST=$(find . -name file_\* -exec cat {} \+)
    - DIST_FILE_LIST="${DIST_FILE_LIST} ${RELEASE_SRC_FILE}"
    - |
      for n in $DIST_FILE_LIST; do
        sz=$(stat -c%s "${n}") >> ${RELEASE_CHECKSUM_FILE};
        printf "# %s: %s bytes\n" "${n}" "${sz}" >> ${RELEASE_CHECKSUM_FILE};
        sha256sum -b "${n}" >> ${RELEASE_CHECKSUM_FILE};
      done
    - DIST_FILE_LIST="${DIST_FILE_LIST} ${RELEASE_CHECKSUM_FILE}"
    # remove new lines from file list
    - DIST_FILE_LIST="${DIST_FILE_LIST//$'\n'/ }"
    - echo "DIST_FILE_LIST=$DIST_FILE_LIST" >> dist.env
    # Upload all needed files
    - HTTP_UPLOAD_DIR=${HTTP_UPLOAD_DIR}/${DIST_VERSION}
    - HTTP_PUBLIC_DIR=${HTTP_PUBLIC_DIR}/${DIST_VERSION}
    - cit_add_ssh_key "${HTTP_UPLOAD_KEY}"
    - ssh ${HTTP_UPLOAD_DIR%:*} "mkdir -p ${HTTP_UPLOAD_DIR#*:}"
    - scp ${DIST_FILE_LIST} ${HTTP_UPLOAD_DIR}
    # Show download links
    - DIST_URL_LIST=""
    - for n in ${DIST_FILE_LIST}; do DIST_URL_LIST="${DIST_URL_LIST} ${HTTP_PUBLIC_DIR}/${n}"; done
    - echo "DIST_URL_LIST=$DIST_URL_LIST" >> dist.env
    - echo -e "\nArchives were published there:\n\n$(for n in ${DIST_FILE_LIST}; do echo "${HTTP_PUBLIC_DIR}/${n}"; done)\n"
    # Show JSON snipppet
    - cit_add_ssh_key "${GITLAB_KEY}"
    - git clone -q --depth 1 ${CTNG_ESP_HELPERS_BRANCH} ${GITLAB_SSH_SERVER}/idf/ctng-esp-helpers.git
    - ./ctng-esp-helpers/print_all_checksum_json.sh "${HTTP_PUBLIC_DIR}" "${TARGETS}" "${HOSTS}" 2>err.log
    - echo ""
    - cat err.log
    # remove empty lines
    - sed -i '/^[[:space:]]*$/d' dist.env
    - cat dist.env

upload_to_github:
  stage: github_deploy
  image: espressif/github-hub:2
  needs: [ upload_to_internal ]
  tags: [ "build", "amd64", "brew" ]
  allow_failure: true
  rules:
    - if: $CI_COMMIT_TAG
      when: manual
  variables:
    GIT_SUBMODULE_STRATEGY: none
    DIST_URL_LIST: ${DIST_URL_LIST}
    DIST_FILE_LIST: ${DIST_FILE_LIST}
    GITHUB_USER: "${GH_USER}"
    GITHUB_TOKEN: "${GH_TOKEN}"
    TAG: ${CI_COMMIT_TAG}
    REPO_URL: ${GH_REPO_URL}
  before_script: []
  script:
    - echo hello
    - echo $DIST_URL_LIST
    # TMP dir
    - rm -rf TMP && mkdir TMP && cd TMP
    # download urls
    - for u in ${DIST_URL_LIST}; do curl -O -sSL --connect-timeout 10 --retry 10 "${u}"; done
    - ls -l
    # hub release upload
    - git remote remove github || true
    - echo "${REPO_URL}"
    - git remote add github ${REPO_URL}
    - hub release
    - hub release show ${TAG} || { echo "Please create a release on GitHub with ${TAG} tag at first"; exit 1; }
    - for n in ${DIST_FILE_LIST}; do hub release edit -m "" -a "${n}" "${TAG}"; done
    - cd -
    - rm -rf TMP

.update_idf_tools:
  allow_failure: true
  variables:
    TOOL_NAME: "toolchain"
    TOOL_MEMBERS: "xtensa-esp32-elf xtensa-esp32s2-elf xtensa-esp32s3-elf riscv32-esp-elf"
    TOOL_VERSION: ${DIST_VERSION}-${GCC_VER}
  trigger:
    project: idf/idf-tools-updater
    strategy: depend

internal_update_idf_tools:
  extends: .update_idf_tools
  stage: internal_deploy
  needs: [ upload_to_internal ]
  when: manual
  variables:
    TOOL_SHA256_URL: ${HTTP_PUBLIC_DIR}/${DIST_VERSION}/crosstool-NG-${DIST_VERSION}-checksum.sha256

github_update_idf_tools:
  extends: .update_idf_tools
  stage: github_deploy
  needs: [ upload_to_internal, upload_to_github ]
  rules:
    - if: $CI_COMMIT_TAG
      when: manual
  variables:
    TOOL_SHA256_URL: ${GH_REPO_URL}/releases/download/${CI_COMMIT_TAG}/crosstool-NG-${CI_COMMIT_TAG}-checksum.sha256

# We use prep_tests job to collect all test data and scripts in artifacts,
# to avoid dependencies for git, because we run some tests on original images.
prep_tests:
  stage: pre_test
  tags: [ "build", "amd64" ]
  image: $CI_DOCKER_REGISTRY/compiler-testsuite:2
  needs: []
  variables:
    GIT_STRATEGY: none
    GIT_SERVER: "https://gitlab-ci-token:${ESPCI_TOKEN}@${CI_SERVER_HOST}:${CI_SERVER_PORT}"
  before_script: []
  artifacts:
    paths:
      - esp-compiler-tests
    expire_in: 6 weeks
  script:
    - test -n "${ESP_COMPILER_TESTS_BRANCH:-}" || exit 1
    - rm -rf "esp-compiler-tests" && git clone -q -b ${ESP_COMPILER_TESTS_BRANCH} "${GIT_SERVER}/idf/esp-compiler-tests.git"
    - cd esp-compiler-tests
    - git log -n10 --oneline

#
# Compiler tests: build-only and just-run-tools
#

.template_compiler_tests:
  stage: test
  artifacts:
    when: always
    paths:
      - esp-compiler-tests/**/*.log
      - esp-compiler-tests/**/*.elf
  variables:
    GIT_STRATEGY: none
  after_script:
    - source citools/import_functions
    - cit_rm ${CONF_TARGET}
  script:
    - ARCHIVE_NAME=$(cat dist/file_${PLATFORM_NAME}_${CONF_TARGET})
    - ${UNARCHIVE_TOOL} dist/${ARCHIVE_NAME}
    - export PATH="${CI_PROJECT_DIR}/${CONF_TARGET}/bin:${PATH}"

    - echo ""
    - echo "*** Build-only tests ****"
    - echo ""
    - |
      (
        cd esp-compiler-tests/build-only
        source profile-${CONF_TARGET}
        ./run-all.sh
      )
    - echo ""
    - echo "*** Just-run-tools tests ****"
    - echo ""
    - |
      (
        cd esp-compiler-tests/just-run-tools
        ./run.sh
      )

# Linux amd64

.template_lin_amd64_compiler_tests:
  extends: .template_compiler_tests
  tags: [ "build", "amd64" ]
  image: $CI_DOCKER_REGISTRY/compiler-testsuite:2
  variables:
    PLATFORM_NAME: "linux-amd64"

esp32_lin_amd64_compiler_tests:
  extends: .template_lin_amd64_compiler_tests
  needs: [ esp32_lin_amd64, prep_tests ]
  variables:
    CONF_TARGET: "xtensa-esp32-elf"

esp32s2_lin_amd64_compiler_tests:
  extends: .template_lin_amd64_compiler_tests
  needs: [ esp32s2_lin_amd64, prep_tests ]
  variables:
    CONF_TARGET: "xtensa-esp32s2-elf"

esp32s3_lin_amd64_compiler_tests:
  extends: .template_lin_amd64_compiler_tests
  needs: [ esp32s3_lin_amd64, prep_tests ]
  variables:
    CONF_TARGET: "xtensa-esp32s3-elf"

riscv32_lin_amd64_compiler_tests:
  extends: .template_lin_amd64_compiler_tests
  needs: [ riscv32_esp_lin_amd64, prep_tests ]
  variables:
    CONF_TARGET: "riscv32-esp-elf"

# macOS amd64

.template_macos_amd64_compiler_tests:
  extends: .template_compiler_tests
  tags: [ "darwin", "amd64" ]
  variables:
    PLATFORM_NAME: "macos"

esp32_macos_amd64_compiler_tests:
  extends: .template_macos_amd64_compiler_tests
  needs: [ esp32_macos, prep_tests ]
  variables:
    CONF_TARGET: "xtensa-esp32-elf"

esp32s2_macos_amd64_compiler_tests:
  extends: .template_macos_amd64_compiler_tests
  needs: [ esp32s2_macos, prep_tests ]
  variables:
    CONF_TARGET: "xtensa-esp32s2-elf"

esp32s3_macos_amd64_compiler_tests:
  extends: .template_macos_amd64_compiler_tests
  needs: [ esp32s3_macos, prep_tests ]
  variables:
    CONF_TARGET: "xtensa-esp32s3-elf"

riscv32_macos_amd64_compiler_tests:
  extends: .template_macos_amd64_compiler_tests
  needs: [ riscv32_esp_macos, prep_tests ]
  variables:
    CONF_TARGET: "riscv32-esp-elf"

# macos arm64

.template_macos_aarch64_compiler_tests:
  extends: .template_compiler_tests
  tags: [ "darwin", "aarch64" ]
  variables:
    PLATFORM_NAME: "macos-arm64"

esp32_macos_aarch64_compiler_tests:
  extends: .template_macos_aarch64_compiler_tests
  needs: [ esp32_macos_arm64, prep_tests ]
  variables:
    CONF_TARGET: "xtensa-esp32-elf"

esp32s2_macos_aarch64_compiler_tests:
  extends: .template_macos_aarch64_compiler_tests
  needs: [ esp32s2_macos_arm64, prep_tests ]
  variables:
    CONF_TARGET: "xtensa-esp32s2-elf"

esp32s3_macos_aarch64_compiler_tests:
  extends: .template_macos_aarch64_compiler_tests
  needs: [ esp32s3_macos_arm64, prep_tests ]
  variables:
    CONF_TARGET: "xtensa-esp32s3-elf"

riscv32_macos_aarch64_compiler_tests:
  extends: .template_macos_aarch64_compiler_tests
  needs: [ riscv32_esp_macos_arm64, prep_tests ]
  variables:
    CONF_TARGET: "riscv32-esp-elf"


#
# "Just-run-tools" on Windows
#

.native_win64_tools_test_template:
  stage: test
  tags: [ "windows", "powershell" ]
  variables:
    GIT_STRATEGY: none
    PLATFORM_NAME: "win64"
  before_script: []
  after_script:
    - Remove-Item -Recurse -Force ${CI_PROJECT_DIR}\*
  script:
    - $ARCHIVE_NAME=$(cat "dist\file_${PLATFORM_NAME}_${CONF_TARGET}")
    - Expand-Archive -DestinationPATH . "dist\$ARCHIVE_NAME"
    - $env:PATH = "${CI_PROJECT_DIR}\${CONF_TARGET}\bin;" + $env:PATH
    - Push-Location esp-compiler-tests\just-run-tools
    - .\run.ps1
    - Pop-Location

# win64

native_win64_tools_test_esp32:
  extends: .native_win64_tools_test_template
  needs: [ esp32_win64, prep_tests ]
  variables:
    CONF_TARGET: "xtensa-esp32-elf"

native_win64_tools_test_esp32s2:
  extends: .native_win64_tools_test_template
  needs: [ esp32s2_win64, prep_tests ]
  variables:
    CONF_TARGET: "xtensa-esp32s2-elf"

native_win64_tools_test_esp32s3:
  extends: .native_win64_tools_test_template
  needs: [ esp32s3_win64, prep_tests ]
  variables:
    CONF_TARGET: "xtensa-esp32s3-elf"

native_win64_tools_test_riscv32:
  extends: .native_win64_tools_test_template
  needs: [ riscv32_esp_win64, prep_tests ]
  variables:
    CONF_TARGET: "riscv32-esp-elf"

# win32

native_win32_tools_test_esp32:
  extends: .native_win64_tools_test_template
  needs: [ esp32_win, prep_tests ]
  variables:
    CONF_TARGET: "xtensa-esp32-elf"
    PLATFORM_NAME: "win32"

native_win32_tools_test_esp32s2:
  extends: .native_win64_tools_test_template
  needs: [ esp32s2_win, prep_tests ]
  variables:
    CONF_TARGET: "xtensa-esp32s2-elf"
    PLATFORM_NAME: "win32"

native_win32_tools_test_esp32s3:
  extends: .native_win64_tools_test_template
  needs: [ esp32s3_win, prep_tests ]
  variables:
    CONF_TARGET: "xtensa-esp32s3-elf"
    PLATFORM_NAME: "win32"

native_win32_tools_test_riscv32:
  extends: .native_win64_tools_test_template
  needs: [ riscv32_esp_win, prep_tests ]
  variables:
    CONF_TARGET: "riscv32-esp-elf"
    PLATFORM_NAME: "win32"


include: '.gitlab/ci/dejagnu-test.yml'

# Linux amd64

# esp32 tests

test_ld_esp32_lin_amd64:
  extends: .dejagnu-test-ld-template
  needs: [ esp32_lin_amd64, prep_tests ]

test_gas_esp32_lin_amd64:
  extends: .dejagnu-test-gas-template
  needs: [ esp32_lin_amd64, prep_tests ]

test_gcc_esp32_lin_amd64:
  extends: .dejagnu-test-gcc-template
  needs: [ esp32_lin_amd64, prep_tests ]

test_gxx_esp32_lin_amd64:
  extends: .dejagnu-test-gxx-template
  needs: [ esp32_lin_amd64, prep_tests ]

#esp32s2 tests

test_ld_esp32s2_lin_amd64:
  extends: .dejagnu-test-ld-template
  needs: [ esp32s2_lin_amd64, prep_tests ]

test_gas_esp32s2_lin_amd64:
  extends: .dejagnu-test-gas-template
  needs: [ esp32s2_lin_amd64, prep_tests ]

test_gcc_esp32s2_lin_amd64:
  extends: .dejagnu-test-gcc-template
  needs: [ esp32s2_lin_amd64, prep_tests ]

test_gxx_esp32s2_lin_amd64:
  extends: .dejagnu-test-gxx-template
  needs: [ esp32s2_lin_amd64, prep_tests ]

#esp32s3 tests

test_ld_esp32s3_lin_amd64:
  extends: .dejagnu-test-ld-template
  needs: [ esp32s3_lin_amd64, prep_tests ]

test_gas_esp32s3_lin_amd64:
  extends: .dejagnu-test-gas-template
  needs: [ esp32s3_lin_amd64, prep_tests ]

test_gcc_esp32s3_lin_amd64:
  extends: .dejagnu-test-gcc-template
  needs: [ esp32s3_lin_amd64, prep_tests ]

test_gxx_esp32s3_lin_amd64:
  extends: .dejagnu-test-gxx-template
  needs: [ esp32s3_lin_amd64, prep_tests ]

# riscv32 tests

test_ld_riscv32_esp_lin_amd64:
  extends: .dejagnu-test-ld-template
  needs: [ riscv32_esp_lin_amd64, prep_tests ]

test_gas_riscv32_esp_lin_amd64:
  extends: .dejagnu-test-gas-template
  needs: [ riscv32_esp_lin_amd64, prep_tests ]

test_gcc_riscv32_esp_lin_amd64:
  extends: .dejagnu-test-gcc-template
  needs: [ riscv32_esp_lin_amd64, prep_tests ]

test_gxx_riscv32_esp_lin_amd64:
  extends: .dejagnu-test-gxx-template
  needs: [ riscv32_esp_lin_amd64, prep_tests ]

# macOS amd64

# esp32 tests

test_ld_esp32_macos:
  extends: .dejagnu-test-ld-template
  needs: [ esp32_macos, prep_tests ]
  tags: [ "darwin", "amd64" ]

test_gas_esp32_macos:
  extends: .dejagnu-test-gas-template
  needs: [ esp32_macos, prep_tests ]
  tags: [ "darwin", "amd64" ]

test_gcc_esp32_macos:
  extends: .dejagnu-test-gcc-template
  needs: [ esp32_macos, prep_tests ]
  tags: [ "darwin", "amd64" ]

test_gxx_esp32_macos:
  extends: .dejagnu-test-gxx-template
  needs: [ esp32_macos, prep_tests ]
  tags: [ "darwin", "amd64" ]

#esp32s2 tests

test_ld_esp32s2_macos:
  extends: .dejagnu-test-ld-template
  needs: [ esp32s2_macos, prep_tests ]
  tags: [ "darwin", "amd64" ]

test_gas_esp32s2_macos:
  extends: .dejagnu-test-gas-template
  needs: [ esp32s2_macos, prep_tests ]
  tags: [ "darwin", "amd64" ]

test_gcc_esp32s2_macos:
  extends: .dejagnu-test-gcc-template
  needs: [ esp32s2_macos, prep_tests ]
  tags: [ "darwin", "amd64" ]

test_gxx_esp32s2_macos:
  extends: .dejagnu-test-gxx-template
  needs: [ esp32s2_macos, prep_tests ]
  tags: [ "darwin", "amd64" ]

#esp32s3 tests

test_ld_esp32s3_macos:
  extends: .dejagnu-test-ld-template
  needs: [ esp32s3_macos, prep_tests ]
  tags: [ "darwin", "amd64" ]

test_gas_esp32s3_macos:
  extends: .dejagnu-test-gas-template
  needs: [ esp32s3_macos, prep_tests ]
  tags: [ "darwin", "amd64" ]

test_gcc_esp32s3_macos:
  extends: .dejagnu-test-gcc-template
  needs: [ esp32s3_macos, prep_tests ]
  tags: [ "darwin", "amd64" ]

test_gxx_esp32s3_macos:
  extends: .dejagnu-test-gxx-template
  needs: [ esp32s3_macos, prep_tests ]
  tags: [ "darwin", "amd64" ]

# riscv32 tests

test_ld_riscv32_esp_macos:
  extends: .dejagnu-test-ld-template
  needs: [ riscv32_esp_macos, prep_tests ]
  tags: [ "darwin", "amd64" ]

test_gas_riscv32_esp_macos:
  extends: .dejagnu-test-gas-template
  needs: [ riscv32_esp_macos, prep_tests ]
  tags: [ "darwin", "amd64" ]

test_gcc_riscv32_esp_macos:
  extends: .dejagnu-test-gcc-template
  needs: [ riscv32_esp_macos, prep_tests ]
  tags: [ "darwin", "amd64" ]

test_gxx_riscv32_esp_macos:
  extends: .dejagnu-test-gxx-template
  needs: [ riscv32_esp_macos, prep_tests ]
  tags: [ "darwin", "amd64" ]

# macOS arm64

# esp32 tests

test_ld_esp32_macos_aarch64:
  extends: .dejagnu-test-ld-template
  needs: [ esp32_macos, prep_tests ]
  tags: [ "darwin", "aarch64" ]

test_gas_esp32_macos_aarch64:
  extends: .dejagnu-test-gas-template
  needs: [ esp32_macos, prep_tests ]
  tags: [ "darwin", "aarch64" ]

test_gcc_esp32_macos_aarch64:
  extends: .dejagnu-test-gcc-template
  needs: [ esp32_macos, prep_tests ]
  tags: [ "darwin", "aarch64" ]

test_gxx_esp32_macos_aarch64:
  extends: .dejagnu-test-gxx-template
  needs: [ esp32_macos, prep_tests ]
  tags: [ "darwin", "aarch64" ]

#esp32s2 tests

test_ld_esp32s2_macos_aarch64:
  extends: .dejagnu-test-ld-template
  needs: [ esp32s2_macos, prep_tests ]
  tags: [ "darwin", "aarch64" ]

test_gas_esp32s2_macos_aarch64:
  extends: .dejagnu-test-gas-template
  needs: [ esp32s2_macos, prep_tests ]
  tags: [ "darwin", "aarch64" ]

test_gcc_esp32s2_macos_aarch64:
  extends: .dejagnu-test-gcc-template
  needs: [ esp32s2_macos, prep_tests ]
  tags: [ "darwin", "aarch64" ]

test_gxx_esp32s2_macos_aarch64:
  extends: .dejagnu-test-gxx-template
  needs: [ esp32s2_macos, prep_tests ]
  tags: [ "darwin", "aarch64" ]

#esp32s3 tests

test_ld_esp32s3_macos_aarch64:
  extends: .dejagnu-test-ld-template
  needs: [ esp32s3_macos, prep_tests ]
  tags: [ "darwin", "aarch64" ]

test_gas_esp32s3_macos_aarch64:
  extends: .dejagnu-test-gas-template
  needs: [ esp32s3_macos, prep_tests ]
  tags: [ "darwin", "aarch64" ]

test_gcc_esp32s3_macos_aarch64:
  extends: .dejagnu-test-gcc-template
  needs: [ esp32s3_macos, prep_tests ]
  tags: [ "darwin", "aarch64" ]

test_gxx_esp32s3_macos_aarch64:
  extends: .dejagnu-test-gxx-template
  needs: [ esp32s3_macos, prep_tests ]
  tags: [ "darwin", "aarch64" ]

# riscv32 tests

test_ld_riscv32_esp_macos_aarch64:
  extends: .dejagnu-test-ld-template
  needs: [ riscv32_esp_macos, prep_tests ]
  tags: [ "darwin", "aarch64" ]

test_gas_riscv32_esp_macos_aarch64:
  extends: .dejagnu-test-gas-template
  needs: [ riscv32_esp_macos, prep_tests ]
  tags: [ "darwin", "aarch64" ]

test_gcc_riscv32_esp_macos_aarch64:
  extends: .dejagnu-test-gcc-template
  needs: [ riscv32_esp_macos, prep_tests ]
  tags: [ "darwin", "aarch64" ]

test_gxx_riscv32_esp_macos_aarch64:
  extends: .dejagnu-test-gxx-template
  needs: [ riscv32_esp_macos, prep_tests ]
  tags: [ "darwin", "aarch64" ]
